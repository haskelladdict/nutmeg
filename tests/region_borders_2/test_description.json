{
  "description": "Region border properties tested on sphere. REFLECTIVE/ABSORPTIVE/TRANSPARENT properties of REGION border tested on sphere with much more complex shape of the region and boundary of the region crossing the sphere apex. Also tested HITS/CROSSINGS statements with COUNT/TRIGGER statements. The test is done on the sphere with complex region border geometry. Region  r1 boundary crosses the apex of the sphere. Region r1 borders are REFLECTIVE for molecule A, ABSORPTIVE for B, and TRANSPARENT for C.  Initially we place 100 molecules of each type inside region r1. We check that all molecules A are contained within r1 and there are none of them in the surrounding region r2. Because B has high diffusion coefficient, they all get absorbed at the border, and after some time we should register none of them inside either r1 or r2. The total count of C as sum across regions r1 and r2 is constant over the simulation. Region r3 borders are REFLECTIVE for molecules D and E. We place 100 molecules D there that also undergo unimolecular reaction D @ surface_class -> E[rate].  We check that total sum of D and E within the region r3 is equal to 100. Also TRIGGER statements are checked.",
  "author": "Boris Kaminsky <borisk@psc.edu",
  "date": "2010-12-08",
  "keywords": [
    "reactions"
  ],
  "run": {
    "mdlfiles": [
      "test.mdl"
    ],
    "commandlineOpts": [
      "-quiet"
    ]
  },
  "checks": [
    {
      "testType": "CHECK_SUCCESS"
    },
    {
      "testType": "COMPARE_COUNTS",
      "haveHeader": true,
      "dataFile": "A.dat",
      "referenceFile": "A_ref.dat"
    },
    {
      "testType": "COMPARE_COUNTS",
      "haveHeader": true,
      "dataFile": "B.dat",
      "referenceFile": "B_ref.dat"
    },
    {
      "testType": "COUNT_CONSTRAINTS",
      "dataFile": "A_hits.dat",
      "haveHeader": true,
      "countConstraints": [
        {
          "target": 0,
          "query": [
            1,
            1,
            -1
          ]
        }
      ]
    },
    {
      "testType": "POSITIVE_OR_ZERO_COUNTS",
      "dataFile": "A_hits.dat",
      "haveHeader": true
    },
    {
      "testType": "COUNT_CONSTRAINTS",
      "dataFile": "C_cross.dat",
      "haveHeader": true,
      "countConstraints": [
        {
          "target": 0,
          "query": [
            1,
            1,
            -1
          ]
        }
      ]
    },
    {
      "testType": "POSITIVE_OR_ZERO_COUNTS",
      "dataFile": "C_cross.dat",
      "haveHeader": true
    },
    {
      "testType" : "CHECK_TRIGGERS",
      "triggerType" : "hits",
      "dataFile": "C_trigger_fr_hits.dat",
      "haveHeader": true,
      "outputTime" : 1e-6,
      "xRange": [-1,1],
      "yRange": [-1,1],
      "zRange": [-1,1]
    },
    {
      "testType" : "CHECK_TRIGGERS",
      "triggerType" : "hits",
      "dataFile": "C_trigger_back_hits.dat",
      "haveHeader": true,
      "outputTime" : 1e-6,
      "xRange": [-1,1],
      "yRange": [-1,1],
      "zRange": [-1,1]
    },
    {
      "testType" : "CHECK_TRIGGERS",
      "triggerType" : "hits",
      "dataFile": "C_trigger_all_hits.dat",
      "haveHeader": true,
      "outputTime" : 1e-6,
      "xRange": [-1,1],
      "yRange": [-1,1],
      "zRange": [-1,1]
    },
    {
      "testType" : "CHECK_TRIGGERS",
      "triggerType" : "hits",
      "dataFile": "C_trigger_fr_cross.dat",
      "haveHeader": true,
      "outputTime" : 1e-6,
      "xRange": [-1,1],
      "yRange": [-1,1],
      "zRange": [-1,1]
    },
    {
      "testType" : "CHECK_TRIGGERS",
      "triggerType" : "hits",
      "dataFile": "C_trigger_back_cross.dat",
      "haveHeader": true,
      "outputTime" : 1e-6,
      "xRange": [-1,1],
      "yRange": [-1,1],
      "zRange": [-1,1]
    },
    {
      "testType" : "CHECK_TRIGGERS",
      "triggerType" : "hits",
      "dataFile": "C_trigger_all_cross.dat",
      "haveHeader": true,
      "outputTime" : 1e-6,
      "xRange": [-1,1],
      "yRange": [-1,1],
      "zRange": [-1,1]
    },
    {
      "testType": "COUNT_CONSTRAINTS",
      "dataFile": "C.dat",
      "haveHeader": true,
      "countConstraints": [
        {
          "target": 100,
          "query": [
            1,
            1
          ]
        }
      ]
    },
    {
      "testType": "COUNT_CONSTRAINTS",
      "dataFile": "r2.dat",
      "haveHeader": true,
      "countConstraints": [
        {
          "target": 100,
          "query": [
            1,
            1
          ]
        }
      ]
    }
  ]
}
